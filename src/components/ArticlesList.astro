---
import { getCollection } from 'astro:content';
import ArticleTags from './ArticleTags.jsx';

const articles = await getCollection('articles');
const sortedArticles = articles.sort((a, b) => {
  const dateA = a.data.date ? new Date(a.data.date) : new Date(0);
  const dateB = b.data.date ? new Date(b.data.date) : new Date(0);
  return dateB.getTime() - dateA.getTime();
});

// Count featured articles
const featuredArticles = sortedArticles.filter(article => article.data.featured);
const featuredCount = featuredArticles.length;

// Extract all unique tags and count occurrences
const tagCounts = {};
sortedArticles.forEach(article => {
  article.data.tags?.forEach(tag => {
    tagCounts[tag] = (tagCounts[tag] || 0) + 1;
  });
});

// Sort tags alphabetically and create tab structure
const sortedTags = Object.keys(tagCounts).sort();
const allCount = sortedArticles.length;
---

<script>
  // Use a more reliable approach for DOM manipulation
  document.addEventListener('DOMContentLoaded', function() {
    let selectedTag = 'All';
    
    function handleTagChange(tag) {
      selectedTag = tag;
      
      // Update active tab styling - target all buttons with tag-tab class
      const allTabs = document.querySelectorAll('.tag-tab');
      allTabs.forEach(tab => {
        if (tab.getAttribute('data-tag') === tag) {
          // Active state
          tab.classList.remove('bg-gray-100', 'dark:bg-gray-800', 'text-gray-700', 'dark:text-gray-300');
          tab.classList.add('bg-primary', 'text-white');
        } else {
          // Inactive state
          tab.classList.remove('bg-primary', 'text-white');
          tab.classList.add('bg-gray-100', 'dark:bg-gray-800', 'text-gray-700', 'dark:text-gray-300');
        }
      });
      
      // Filter articles
      const allCards = document.querySelectorAll('.article-card');
      allCards.forEach(card => {
        const cardTags = card.dataset.tags ? card.dataset.tags.split(',') : [];
        const isFeatured = card.dataset.featured === 'true';
        let shouldShow = false;
        
        if (selectedTag === 'All') {
          shouldShow = true;
        } else if (selectedTag === 'Featured') {
          shouldShow = isFeatured;
        } else {
          shouldShow = cardTags.includes(selectedTag);
        }
        
        card.style.display = shouldShow ? '' : 'none';
      });
    }
    
    // Attach event listeners to all tag buttons
    const tagButtons = document.querySelectorAll('.tag-tab');
    tagButtons.forEach(button => {
      button.addEventListener('click', function() {
        const tag = this.getAttribute('data-tag');
        handleTagChange(tag);
      });
    });
    
    // Set initial active tab
    handleTagChange('All');
  });
</script>

<section class="mt-4">
  <!-- Articles Description -->
  <div class="mb-6 sm:mb-8 text-center px-4">
    <p class="text-base sm:text-lg font-medium text-gray-700 dark:text-gray-300 leading-relaxed max-w-2xl mx-auto mb-2">
      Insights from Building, Leading, and Learning
    </p>
    <p class="text-sm sm:text-base font-medium text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
      Drawn from real projects, research, and product experience.
    </p>
  </div>
  
  <div class="flex items-center gap-2 sm:gap-4 mb-4 sm:mb-6 px-4">
    <div class="flex items-center gap-2">
      <h2 class="text-xs sm:text-sm font-medium tracking-wider uppercase text-gray-600 dark:text-gray-400">Filter by Topic</h2>
    </div>
    <div class="flex-1 h-[1px] bg-gray-200 dark:bg-gray-800"></div>
  </div>
  
  <!-- Tag Filter Tabs -->
  <div class="mb-4 sm:mb-6">
    <!-- Mobile: Horizontal scroll with padding -->
    <div class="flex overflow-x-auto gap-2 pb-2 px-4 sm:hidden scrollbar-hide">
      <!-- All tab always first -->
      <button 
        class="tag-tab px-2.5 py-1.5 rounded-full text-xs font-medium transition-colors bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-primary hover:text-white whitespace-nowrap flex-shrink-0"
        data-tag="All"
      >
        All ({allCount})
      </button>
      
      <!-- Featured tab -->
      <button 
        class="tag-tab px-2.5 py-1.5 rounded-full text-xs font-medium transition-colors bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-primary hover:text-white whitespace-nowrap flex-shrink-0"
        data-tag="Featured"
      >
        Featured ({featuredCount})
      </button>
      
      <!-- Other tags sorted alphabetically -->
      {sortedTags.map(tag => (
        <button 
          class="tag-tab px-2.5 py-1.5 rounded-full text-xs font-medium transition-colors bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-primary hover:text-white whitespace-nowrap flex-shrink-0"
          data-tag={tag}
        >
          {tag} ({tagCounts[tag]})
        </button>
      ))}
    </div>
    
    <!-- Desktop: Flex wrap -->
    <div class="hidden sm:flex flex-wrap gap-2">
      <!-- All tab always first -->
      <button 
        class="tag-tab px-2.5 py-1 rounded-full text-xs font-medium transition-colors bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-primary hover:text-white"
        data-tag="All"
      >
        All ({allCount})
      </button>
      
      <!-- Featured tab -->
      <button 
        class="tag-tab px-2.5 py-1 rounded-full text-xs font-medium transition-colors bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-primary hover:text-white"
        data-tag="Featured"
      >
        Featured ({featuredCount})
      </button>
      
      <!-- Other tags sorted alphabetically -->
      {sortedTags.map(tag => (
        <button 
          class="tag-tab px-2.5 py-1 rounded-full text-xs font-medium transition-colors bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-primary hover:text-white"
          data-tag={tag}
        >
          {tag} ({tagCounts[tag]})
        </button>
      ))}
    </div>
  </div>
  
  <!-- Articles List -->
  <ul class="space-y-3 sm:space-y-4 px-4">
    {sortedArticles.map(article => (
      <li 
        key={article.id} 
        class="article-card group transition-all duration-200"
        data-tags={article.data.tags?.join(',') || ''}
        data-featured={article.data.featured ? 'true' : 'false'}
      >
        <a 
          href={`/articles/${article.slug}`}
          class="block py-4 px-4 sm:py-5 sm:px-6 rounded-xl bg-gray-50 dark:bg-gray-900/30 border border-gray-200 dark:border-gray-800 transition-all duration-200 hover:bg-gray-100 dark:hover:bg-gray-900/50 hover:border-primary/30 hover:shadow-md"
        >
          <div class="flex items-start justify-between mb-2 gap-3">
            <h3 class="font-medium text-sm sm:text-base text-gray-900 dark:text-gray-100 group-hover-accent transition-colors duration-200 leading-snug">{article.data.title}</h3>
            <div class="flex items-center gap-2 flex-shrink-0">
              {article.data.date && (
                <span class="text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap">{article.data.date}</span>
              )}
              <svg class="w-4 h-4 text-gray-400 group-hover-accent transition-colors duration-200 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
              </svg>
            </div>
          </div>
          {article.data.description && (
            <p class="text-xs sm:text-sm text-gray-700 dark:text-gray-300 mb-3 leading-relaxed">{article.data.description}</p>
          )}
          
          <!-- Responsive Tags -->
          <ArticleTags 
            tags={article.data.tags}
            client:load
          />
        </a>
      </li>
    ))}
  </ul>
</section>
