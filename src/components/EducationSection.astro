---
import { getCollection } from 'astro:content';
import { render } from 'astro:content';

// Get all education entries and filter/sort them
const allEducation = await getCollection('education');
const visibleEducation = allEducation
  .filter(entry => entry.data.visible)
  .sort((a, b) => (a.data.order || 999) - (b.data.order || 999));

const featuredEntries = visibleEducation.filter(entry => entry.data.featured);
const nonFeaturedEntries = visibleEducation.filter(entry => !entry.data.featured);

// Function to get status color based on status value
const getStatusColor = (status) => {
  if (!status) return '';
  const statusLower = status.toLowerCase();
  if (statusLower.includes('graduated') || statusLower.includes('completed') || statusLower.includes('candidate')) {
    return 'text-secondary'; // Green for completed/graduated
  }
  if (statusLower.includes('in progress') || statusLower.includes('current')) {
    return 'text-accent'; // Amber for in progress
  }
  return 'text-gray-500 dark:text-gray-400'; // Default gray
};

// Pre-render content for all entries
const renderedEntries = await Promise.all(
  visibleEducation.map(async (entry) => {
    const rendered = entry.body && entry.body.trim() ? await render(entry) : null;
    return {
      ...entry,
      rendered
    };
  })
);

const featuredEntriesRendered = renderedEntries.filter(entry => entry.data.featured);
const nonFeaturedEntriesRendered = renderedEntries.filter(entry => !entry.data.featured);
const hasExpandableContent = nonFeaturedEntriesRendered.length > 0;
---

<section class="mb-16">
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-lg font-medium text-text-light dark:text-text-dark tracking-wide uppercase">Education</h2>
    {hasExpandableContent && (
      <button 
        id="education-toggle"
        class="text-sm text-gray-600 dark:text-gray-400 hover-accent transition-colors flex items-center gap-1"
        aria-label="Toggle education details"
      >
        <span id="education-toggle-text">Show all</span>
        <svg 
          id="education-toggle-icon" 
          class="w-4 h-4 transition-transform duration-200" 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <polyline points="6 9 12 15 18 9"></polyline>
        </svg>
      </button>
    )}
  </div>
  
  <div class="prose prose-gray dark:prose-invert max-w-none">
    <div class="education-content text-sm" id="education-content">
      <div class="space-y-4">
        <!-- Featured entries (always visible) -->
        {featuredEntriesRendered.map((entry) => (
          <div class="education-entry featured pb-4" data-entry-id={entry.id}>
            <div class="pl-3 border-l-2 border-secondary">
              <div class="flex justify-between items-baseline">
                <h3 class="font-medium text-text-light dark:text-text-dark text-base leading-tight">{entry.data.title}</h3>
                <span class="text-sm text-gray-600 dark:text-gray-400 whitespace-nowrap ml-4 flex-shrink-0">{entry.data.period}</span>
              </div>
              <p class="text-gray-600 dark:text-gray-400 text-sm mb-3 -mt-1">
                {entry.data.institution}
                {entry.data.status && <span class={`${getStatusColor(entry.data.status)} font-medium`}> • {entry.data.status}</span>}
              </p>
              {entry.rendered && (
                <div class="text-gray-700 dark:text-gray-300 text-sm prose prose-gray dark:prose-invert max-w-none">
                  <entry.rendered.Content />
                </div>
              )}
            </div>
          </div>
        ))}
        
        <!-- Non-featured entries (initially hidden) -->
        {hasExpandableContent && (
          <div id="education-expandable" class="space-y-4" style="display: none;">
            {nonFeaturedEntriesRendered.map((entry) => (
              <div class="education-entry non-featured pb-4" data-entry-id={entry.id}>
                <div class="pl-3 border-l-2 border-secondary">
                  <div class="flex justify-between items-baseline">
                    <h3 class="font-medium text-text-light dark:text-text-dark text-base leading-tight">{entry.data.title}</h3>
                    <span class="text-sm text-gray-600 dark:text-gray-400 whitespace-nowrap ml-4 flex-shrink-0">{entry.data.period}</span>
                  </div>
                  <p class="text-gray-600 dark:text-gray-400 text-sm mb-3 -mt-1">
                    {entry.data.institution}
                    {entry.data.status && <span class={`${getStatusColor(entry.data.status)} font-medium`}> • {entry.data.status}</span>}
                  </p>
                  {entry.rendered && (
                    <div class="text-gray-700 dark:text-gray-300 text-sm prose prose-gray dark:prose-invert max-w-none">
                      <entry.rendered.Content />
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  </div>
</section>

<script define:vars={{ hasExpandableContent }}>
  // Education section expand/collapse functionality
  document.addEventListener('DOMContentLoaded', function() {
    if (!hasExpandableContent) return;
    
    const toggleButton = document.getElementById('education-toggle');
    const toggleText = document.getElementById('education-toggle-text');
    const toggleIcon = document.getElementById('education-toggle-icon');
    const expandableContent = document.getElementById('education-expandable');
    
    if (!toggleButton || !expandableContent) return;
    
    let isExpanded = false;
    
    function toggleEducation() {
      if (isExpanded) {
        expandableContent.style.display = 'none';
        toggleText.textContent = 'Show all';
        toggleIcon.style.transform = 'rotate(0deg)';
      } else {
        expandableContent.style.display = 'block';
        toggleText.textContent = 'Show less';
        toggleIcon.style.transform = 'rotate(180deg)';
      }
      isExpanded = !isExpanded;
    }
    
    toggleButton.addEventListener('click', toggleEducation);
  });
</script>

<style>
  /* Smooth transitions for expand/collapse */
  #education-expandable {
    transition: opacity 0.3s ease-in-out;
  }
  
  #education-toggle-icon {
    transition: transform 0.2s ease-in-out;
  }
</style>
