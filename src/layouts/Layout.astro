---
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';

interface Props {
  title?: string;
  description?: string;
}

const { 
  title = "Gustav du Plessis - Portfolio", 
  description = "Product Manager, Developer & UX Designer" 
} = Astro.props;
---

<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    
    <!-- Google Fonts - Plus Jakarta Sans -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap" rel="stylesheet">
    
    <!-- Alpine.js for interactive components -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <script is:inline>
      // Prevent flash of unstyled content (FOUC) for dark mode
      (function() {
        const theme = localStorage.getItem('theme');
        const html = document.documentElement;
        
        // Remove any existing dark class first
        html.classList.remove('dark');
        
        if (theme === 'dark' || (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          // Use dark mode if explicitly set to dark OR if no preference and system prefers dark
          html.classList.add('dark');
        }
        // Otherwise stay in light mode (default)
      })();
    </script>
    
    <script is:inline>
      // Enhanced header scroll behavior with mobile optimizations
      window.addEventListener('DOMContentLoaded', function() {
        const headerSection = document.getElementById('header-section');
        let stickyHeader = null;
        let isSticky = false;
        let lastScrollY = window.scrollY;
        let isScrollingDown = false;
        
        function handleScroll() {
          const scrollY = window.scrollY;
          const shouldBeSticky = scrollY > 50; // Reduced threshold for mobile
          isScrollingDown = scrollY > lastScrollY;
          lastScrollY = scrollY;
          
          if (shouldBeSticky && !isSticky) {
            // Create sticky header
            isSticky = true;
            stickyHeader = headerSection.cloneNode(true);
            stickyHeader.id = 'sticky-header';
            stickyHeader.className = 'fixed top-0 left-0 right-0 z-50 bg-bg-light/95 dark:bg-bg-dark/95 backdrop-blur-xl border-b border-gray-200/50 dark:border-gray-700/50 py-2 sm:py-3 transition-all duration-300';
            stickyHeader.style.transform = 'translateY(-100%)';
            document.body.insertBefore(stickyHeader, document.body.firstChild);
            
            // Animate in
            setTimeout(() => {
              if (stickyHeader) {
                stickyHeader.style.transform = 'translateY(0)';
              }
            }, 10);
            
          } else if (!shouldBeSticky && isSticky) {
            // Remove sticky header
            isSticky = false;
            if (stickyHeader) {
              stickyHeader.style.transform = 'translateY(-100%)';
              setTimeout(() => {
                if (stickyHeader && stickyHeader.parentNode) {
                  stickyHeader.parentNode.removeChild(stickyHeader);
                }
                stickyHeader = null;
              }, 300);
            }
          } else if (isSticky && stickyHeader) {
            // Mobile: hide header when scrolling down, show when scrolling up
            if (window.innerWidth < 640) { // Mobile breakpoint
              if (isScrollingDown && scrollY > 150) {
                stickyHeader.style.transform = 'translateY(-100%)';
              } else if (!isScrollingDown || scrollY <= 150) {
                stickyHeader.style.transform = 'translateY(0)';
              }
            }
          }
        }
        
        // Throttled scroll listener for better performance
        let ticking = false;
        function requestTick() {
          if (!ticking) {
            requestAnimationFrame(handleScroll);
            ticking = true;
            setTimeout(() => { ticking = false; }, 16); // ~60fps
          }
        }
        
        // Listen for scroll events
        window.addEventListener('scroll', requestTick);
      });
    </script>
    
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-5Z5ND3CLWS"></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-5Z5ND3CLWS');
    </script>
    
    <!-- PostHog Analytics -->
    <script is:inline>
      !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.crossOrigin="anonymous",p.async=!0,p.src=s.api_host.replace(".i.posthog.com","-assets.i.posthog.com")+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="init Ie Ts Ms Ee Es Rs capture Ge calculateEventProperties Os register register_once register_for_session unregister unregister_for_session js getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSurveysLoaded onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey canRenderSurveyAsync identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty Ds Fs createPersonProfile Ls Ps opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing Cs debug I As getPageViewId captureTraceFeedback captureTraceMetric".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
      posthog.init('phc_nomQgel5x7rcweq9UknWH2hxhOcnNifs64vEQXVJIj1', {
          api_host: 'https://eu.i.posthog.com',
          defaults: '2025-05-24',
          person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well
      })
    </script>
  </head>
  <body class="bg-bg-light dark:bg-bg-dark min-h-screen font-sans text-text-light dark:text-text-dark transition-colors duration-300 ease-in-out">
    <!-- Main Content -->
    <div class="relative min-h-screen overflow-x-hidden">
      <div class="max-w-4xl mx-auto p-6 sm:p-6 lg:p-8 flex flex-col min-h-screen transition-colors duration-300 ease-in-out font-sans tracking-normal">
        <!-- Header that transforms on scroll -->
        <div id="header-section" class="flex justify-center mb-8 sm:mb-8 transition-all duration-300 ease-in-out">
          <Navbar currentPath={Astro.url.pathname} />
        </div>
        
        <div class="flex-1">
          <slot />
        </div>
        <div class="mt-auto pt-16 sm:pt-16">
          <Footer />
        </div>
      </div>
    </div>
  </body>
</html>
