---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Get all work with me content
const workWithMeEntries = await getCollection('workWithMe');

// Filter tabs (exclude contact section) and sort by order
const tabs = workWithMeEntries
  .filter(entry => entry.data.type !== 'contact')
  .sort((a, b) => (a.data.order || 0) - (b.data.order || 0));

// Get contact section
const contactEntry = workWithMeEntries.find(entry => entry.data.type === 'contact');
const { Content: ContactContent } = await contactEntry?.render() || { Content: null };
---

<Layout title="Let's Work Together | Gustav du Plessis" description="Available for product leadership, strategic consulting, and meaningful collaborations">
  <main class="min-h-screen px-4 pb-20">
    <div class="max-w-4xl mx-auto">
      
      <section class="mt-4">
        <!-- Description Section -->
        <div class="mb-6 sm:mb-8 text-center px-4">
          <p class="text-sm sm:text-base font-medium text-gray-700 dark:text-gray-300 leading-relaxed max-w-2xl mx-auto mb-2">
            Whether you need strategic input, flexible product leadership, or a long-term engagement, I offer multiple ways to collaborate.
          </p>
          <p class="text-xs sm:text-sm font-medium text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
            Choose the engagement type that aligns with your current needs and timeline.
          </p>
        </div>

        <!-- Tabs Section -->
        <!-- Section Header with tabs integrated -->
        <div class="mb-4 sm:mb-6">
          <div class="flex items-center gap-2 sm:gap-4 mb-4 sm:mb-6 px-4">
            <h2 class="text-xs sm:text-sm font-medium tracking-wider uppercase text-gray-600 dark:text-gray-400">Engagement Types</h2>
            <div class="flex-1 h-[1px] bg-gray-200 dark:bg-gray-800"></div>
          </div>
            
          <!-- Mobile: Scrollable pills -->
          <div class="flex overflow-x-auto gap-2 pb-2 px-4 sm:hidden scrollbar-hide">
            {tabs.map((tab, index) => (
              <button
                class={`px-3 py-2 rounded-full text-xs font-medium transition-colors whitespace-nowrap flex-shrink-0 ${
                  index === 0
                    ? 'bg-secondary text-white shadow-sm'
                    : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-secondary hover:text-white border border-gray-200 dark:border-gray-700'
                }`}
                type="button"
                role="tab"
                aria-selected={index === 0 ? 'true' : 'false'}
                aria-controls={`panel-${tab.data.slug || tab.slug}`}
                id={`tab-${tab.data.slug || tab.slug}`}
                onclick="switchTab(event, this)"
                data-anchor={tab.data.slug || tab.slug}
              >
                {tab.data.title}
              </button>
            ))}
          </div>
          
          <!-- Desktop: Flex wrap -->
          <div class="hidden sm:flex flex-wrap gap-2 px-4">
            {tabs.map((tab, index) => (
              <button
                class={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                  index === 0
                    ? 'bg-secondary text-white shadow-sm'
                    : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-secondary hover:text-white border border-gray-200 dark:border-gray-700'
                }`}
                type="button"
                role="tab"
                aria-selected={index === 0 ? 'true' : 'false'}
                aria-controls={`panel-${tab.data.slug || tab.slug}`}
                id={`tab-${tab.data.slug || tab.slug}`}
                onclick="switchTab(event, this)"
                data-anchor={tab.data.slug || tab.slug}
              >
                {tab.data.title}
              </button>
            ))}
          </div>
        </div>

        <!-- Tab Panels -->
        <div class="space-y-8 mb-6">
          {tabs.map(async (tab, index) => {
            const { Content } = await tab.render();
            return (
              <div
                class={`tab-panel ${index === 0 ? 'block' : 'hidden'}`}
                id={`panel-${tab.data.slug || tab.slug}`}
                role="tabpanel"
                aria-labelledby={`tab-${tab.data.slug || tab.slug}`}
                data-anchor={tab.data.slug || tab.slug}
              >
                <div class="py-3">
                  <div class="prose prose-gray dark:prose-invert max-w-none">
                    <Content />
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        <!-- Availability Note -->
        <section class="mb-8">
          <div class="max-w-2xl mx-auto py-4">
            <div class="px-3 py-2 bg-red-800/10 dark:bg-red-800/15 border border-red-800/25 rounded-lg">
              <p class="text-xs sm:text-sm text-gray-600 dark:text-gray-300 leading-relaxed italic text-center">
                My availability depends on active engagements, but I always welcome conversations that could lead to meaningful collaboration.
              </p>
            </div>
          </div>
        </section>

        <!-- Contact Section -->
        <section id="contact" class="text-center">
        <div class="p-6 rounded-xl bg-white dark:bg-gray-900/40 border border-gray-200 dark:border-gray-800 transition-all duration-200 hover:shadow-md hover:border-gray-300 dark:hover:border-gray-700">
          <h2 class="text-xl sm:text-2xl font-bold text-text-light dark:text-text-dark mb-4">
            {contactEntry?.data.title}
          </h2>
          
          <div class="mb-6">
            <p class="text-sm sm:text-base text-gray-600 dark:text-gray-300 leading-relaxed max-w-2xl mx-auto">
              {contactEntry?.data.header_text}
            </p>
          </div>
          
          <div class="flex flex-col sm:flex-row gap-3 justify-center items-center mb-6">
            <a 
              href={contactEntry?.data.calendar_link}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg text-xs font-medium transition-all duration-200 hover:bg-primary/90 hover:shadow-lg hover:-translate-y-0.5"
            >
              {contactEntry?.data.buttons?.book_call}
            </a>
            
            <a 
              href={contactEntry?.data.linkedin}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center gap-2 px-4 py-2 bg-[#0077B5] text-white rounded-lg text-xs font-medium transition-all duration-200 hover:bg-[#005885] hover:shadow-lg hover:-translate-y-0.5"
            >
              {contactEntry?.data.buttons?.linkedin}
            </a>
            
            <a 
              href={`mailto:${contactEntry?.data.email}`}
              class="inline-flex items-center gap-2 px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg text-xs font-medium transition-all duration-200 hover:bg-gray-200 dark:hover:bg-gray-700 hover:shadow-lg hover:-translate-y-0.5"
            >
              {contactEntry?.data.buttons?.email}
            </a>
          </div>

          <div>
            <p class="text-xs text-gray-500 dark:text-gray-400 max-w-lg mx-auto">
              {contactEntry?.data.footer_text}
            </p>
          </div>
        </div>
        </section>

    </div>
  </main>

  <!-- Tab Switching Script -->
  <script is:inline>
    function switchTab(event, button) {
      const anchor = button.getAttribute('data-anchor');
      
      // Remove active state from all tabs
      const allTabs = document.querySelectorAll('[role="tab"]');
      const allPanels = document.querySelectorAll('[role="tabpanel"]');
      
      allTabs.forEach(tab => {
        tab.setAttribute('aria-selected', 'false');
        tab.className = tab.className.replace(
          'bg-secondary text-white shadow-sm',
          'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-secondary hover:text-white border border-gray-200 dark:border-gray-700'
        );
      });
      
      allPanels.forEach(panel => {
        panel.classList.add('hidden');
        panel.classList.remove('block');
      });
      
      // Activate clicked tab
      button.setAttribute('aria-selected', 'true');
      button.className = button.className.replace(
        'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-secondary hover:text-white border border-gray-200 dark:border-gray-700',
        'bg-secondary text-white shadow-sm'
      );
      
      // Show corresponding panel
      const panel = document.getElementById(`panel-${anchor}`);
      if (panel) {
        panel.classList.remove('hidden');
        panel.classList.add('block');
      }
      
      // Update URL without scrolling
      if (history.pushState) {
        history.pushState(null, null, `#${anchor}`);
      }
    }

    function switchToTabByAnchor(anchor) {
      const targetButton = document.querySelector(`[data-anchor="${anchor}"]`);
      if (targetButton) {
        switchTab(null, targetButton);
      }
    }

    // Handle initial page load with anchor
    document.addEventListener('DOMContentLoaded', function() {
      const hash = window.location.hash.substring(1);
      if (hash && ['consulting', 'fractional', 'permanent'].includes(hash)) {
        switchToTabByAnchor(hash);
      }
    });

    // Handle browser back/forward navigation
    window.addEventListener('popstate', function(event) {
      const hash = window.location.hash.substring(1);
      if (hash && ['consulting', 'fractional', 'permanent'].includes(hash)) {
        switchToTabByAnchor(hash);
      } else {
        // Default to first tab if no valid hash
        const firstTab = document.querySelector('[role="tab"]');
        if (firstTab) {
          switchTab(null, firstTab);
        }
      }
    });
  </script>
</Layout>
